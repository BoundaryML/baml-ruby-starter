###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ bundle add sorbet-runtime sorbet-coerce sorbet-struct-comparable
#
###############################################################################

# This file was generated by BAML: please do not edit it.
#
# frozen_string_literal: true
# rubocop: disable
# formatter:off

# typed: false
require "delegate"
require "sorbet-coerce"
require "sorbet-struct-comparable"
require "sorbet-runtime"

module Baml
  
  module Types

    class Category < T::Enum
      enums do
        Refund = new("Refund")
        CancelOrder = new("CancelOrder")
        TechnicalSupport = new("TechnicalSupport")
        AccountIssue = new("AccountIssue")
        Question = new("Question")
      end
    end

    class OrderStatus < T::Enum
      enums do
        ORDERED = new("ORDERED")
        SHIPPED = new("SHIPPED")
        DELIVERED = new("DELIVERED")
        CANCELLED = new("CANCELLED")
      end
    end
    
    class Email < T::Struct; end
    
    class MessageFeatures < T::Struct; end
    
    class OrderInfo < T::Struct; end

    class Email < T::Struct
      if defined?(T::Struct::ActsAsComparable)
        include T::Struct::ActsAsComparable
      end
      const :subject, String
      const :body, String
      const :from_address, String
    end

    class MessageFeatures < T::Struct
      if defined?(T::Struct::ActsAsComparable)
        include T::Struct::ActsAsComparable
      end
      const :categories, T::Array[Baml::Types::Category]
    end

    class OrderInfo < T::Struct
      if defined?(T::Struct::ActsAsComparable)
        include T::Struct::ActsAsComparable
      end
      const :order_status, Baml::Types::OrderStatus
      const :tracking_number, T.nilable(String)
      const :estimated_arrival_date, T.nilable(String)
    end
  end

  module Unstable
    class FunctionResult < SimpleDelegator
      extend T::Sig
      extend T::Generic

      ParsedType = type_member

      sig { returns(ParsedType) }
      attr_reader :parsed

      sig { params(inner: Baml::Ffi::FunctionResult, parsed: ParsedType).void }
      def initialize(inner:, parsed:)
        @inner = inner
        @parsed = parsed
      end
    end
  end
end


